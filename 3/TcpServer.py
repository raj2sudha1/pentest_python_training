import socket
import threading
import argparse

# TCP Listener
# eXecute as a Reverse Shell or Backdoor
# Proxy Server
# Custom Server (FTP, HTTP etc)

# python TcpServer.py -p 9999

def serveClient(clientToServeSocket,clientIPAddress,portNumber):
    clientRequest = clientToServeSocket.recv(4096)
    print "[+] Received data from the client (%s:%d) : %s"%(clientIPAddress,portNumber,clientRequest)
    
    # Reply back to client with a response
    clientToServeSocket.send("I am a sever response, my version is 1.5")
    # We're done close the client socket
    clientToServeSocket.close()
    
def startServer(portNumber):
    server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    server.bind(("0.0.0.0",portNumber))
    #server.bind(int(portNumber))
    server.listen(10)
    print "[+] Listening locally on port %d ..."% portNumber
    
    while True:
        client,address = server.accept()
        print "[+] Connected with the client : %s:%d"%(address[0],address[1])
        
        # Handle clients through multi-threading
        serveClientThread = threading.Thread(target=serveClient,args=(client,address[0],address[1]))
        serveClientThread.start()
        
    
def main():
    #Parse the command Line arguments
    parser = argparse.ArgumentParser('TCP Server')
    parser.add_argument("-p","--port",type=int,help="The port number to connect with", default=4444)
    args = parser.parse_args()
    
    # Store the argument value
    portNumber = args.port
    
    # Call the start server function
    startServer(portNumber)
    
if __name__ == "__main__":
    main()